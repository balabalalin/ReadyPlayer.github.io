<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Unity Shader入门(1)---实现棋盘式渲染]]></title>
    <url>%2F2018%2F04%2F22%2FUnity%20Shader%E5%AE%9E%E7%8E%B0%E6%A3%8B%E7%9B%98%E5%BC%8F%E6%B8%B2%E6%9F%93%2F</url>
    <content type="text"><![CDATA[Unity Shader学习打卡!最近在Unity Shader的官方教程中学习到了利用VPOS语义来获取屏幕空间像素坐标并利用该语义对游戏对象进行棋盘式的渲染!PS:使用像素位置语义(VPOS)使得很难在同一个顶点到片段结构中同时使用剪​​辑空间位置（SV_POSITION）和VPOS。所以当使用VPOS语义时顶点着色器应该输出剪辑空间位置作为一个单独的“out”变量。 先上效果图:关键式是利用VPOS获取到的像素坐标值来实现下图的效果:根据图我们可以明确我们实现的过程，就是将像素坐标和为偶数的像素点渲染，为奇数的跳过渲染!我们可以利用clip(x)函数来实现跳过渲染的操作1clip(x) : 如果x向量中任何一个元素的值小于0则丢弃(跳过)该像素 由于Unity Shader中好像没有可以用来判断奇偶的函数!所以我们需要利用其他的函数来实现判断的效果!这里我用到的函数有1frac(x) : 取x值的小数 我们将得到的像素坐标值乘于0.5(除于2)然后再利用这个函数来取小数值就可以判断这个值是奇数还是偶数了!奇数/2有小数，偶数/2没小数!然后再对这个值进行取反的操作!这样像素坐标和为偶数的可以得到一个为0的值，而像素坐标和为奇数的会得到一个负数的值!然后我们再利用clip(x)函数对这个得到的值进行判断，就可以跳过渲染像素坐标和为奇数的像素点!实现后的效果图:可以看到实现的效果并不理想，棋盘的效果并不明显!因为每一个像素点实在太小了我们并不能直观的看到!假设我们需要将这个效果放大16倍!我们可以让每16个像素点都作为一个像素点来渲染!这样我们就可以实现放大的效果!PS:因为(0, 0)这个坐标点有点特殊所以我们就不理它了，并不影响最后效果，因为实在太小了!利用的函数1floor(x) : 返回小于等于这个值的最大整数 将每一个像素坐标点的x, y坐标都乘于0.25(除于4)，然后利用floor函数进行运算!12345678x = floor(x * 0.25);y = floor(y * 0.25);--------------------1 = floor(0.25) = 1;2 = floor(0.5) = 1;3 = floor(0.75) = 1;4 = floor(1) = 1;这里的1,2,3,4为像素点的x,y坐标! 这样一来每16个像素点(4 * 4)都作为一个像素点来渲染了!效果: 贴上代码:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677Shader "Custom/Vpos" &#123; Properties &#123; //声明两个属性:贴图、棋盘格子大小(0.1, 1)10倍到1倍 _MainTex ("Texture", 2D) = "white" &#123;&#125; _CheckerRange ("CheckerRanger", range(0.1, 1)) = 0.25 &#125; SubShader &#123; //顶点着色器和片段着色器需要写在在Pass通道中 Pass &#123; //shader本体 CGPROGRAM //编译指令，指明了vertex和fragment的方法名 #pragma vertex vert #pragma fragment frag //获取Properties中声明的属性值 sampler2D _MainTex; fixed _CheckerRange; //定义一个a2v结构体，用来传递多个变量值给vert方法! struct a2v &#123; //获取对象的顶点坐标 float4 vertex : POSITION; //获取对象的第一UV坐标 float2 uv : TEXCOORD0; &#125;; //定义一个v2f结构体，作为vert的返回值 struct v2f &#123; //声明一个语义为第一UV坐标的变量 float2 uv : TEXCOORD0; &#125;; //定义vert方法 v2f vert(a2v i, out float4 outpos : SV_POSITION) &#123; v2f o; o.uv = i.uv; //将对象顶点坐标转化到"剪辑空间" //当使用VPOS语义时需要将剪辑空间位置作为一个单独的"out"变量 outpos = UnityObjectToClipPos(i.vertex); return o; &#125;; //定义frag方法，这里将语义为VPOS的screenPos作为参数传入 //为了实现最大的可移植性!需要使用UNITY_VPOS_TYPE作为语义为VPOS变量的数据类型! fixed4 frag(v2f i, UNITY_VPOS_TYPE screenPos : VPOS) : SV_Target &#123; //将获取到的屏幕像素坐标的x,y轴乘于指定的_CheckerRange值 //并利用floor函数取小于等于这个值的最大整数 //实现多个像素点渲染成一个像素点，放大棋盘的效果 screenPos.x = floor(screenPos.x * _CheckerRange); screenPos.y = floor(screenPos.y * _CheckerRange); //对这个像素点的x,y轴和进行运算操作 //实现像素点之和为偶数的得到一个为0的值，为奇数的获取一个负数的值 float checker = -frac((screenPos.x + screenPos.y) * 0.5); //对这个得到的值进行判断 //实现像素点之和为偶数的渲染，为奇数的跳过渲染 clip(checker); //获取贴图的像素点值 fixed4 c = tex2D(_MainTex, i.uv); return c; &#125;; ENDCG &#125; &#125;&#125;]]></content>
      <categories>
        <category>Unity Shader</category>
      </categories>
      <tags>
        <tag>Shader</tag>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo + Github搭建个人博客总结]]></title>
    <url>%2F2018%2F04%2F20%2FHexo%20%2B%20Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[这几天尝试使用Hexo + Github搭建个人博客，终于搞定了，现在来总结下搭建过程! 安装环境 + 本地运行Hexo众所周知，想要在本地上运行Hexo博客需要安装nodejs和npm环境!然后安装hexo1$npm install -g hexo 切换到一个准备好存放博客的文件夹(文件夹需要为空)1$hexo init 这样可以在这个文件夹内创建一个hexo博客的环境 安装需要的插件1$npm install 编译一下hexo博客1$hexo g 这里可能会产生第一个错误(反正我是产生了)12ERROR Local hexo not found in E:\blogERROR Try running: &apos;npm install hexo --save&apos; 我的解决办法是重装新版本的nodejs推荐到:Nodejs 上去下载nodejs，还会自带安装npm!网上很多解决办法是1$npm install hexo --save 不过我这里不行，可能因为nodejs和npm版本不支持吧 当成功编译hexo博客后就可以运行下hexo博客了1$hexo s hexo会在本地的4000端口上运行hexo博客，如果提示4000端口被占用了1$hexo s -p 端口号 运行成功后就可以访问本地的hexo博客了 更换博客主题首先需要做的就是就是下载一个hexo博客主题了，这里我使用的next主题!可以拉到这个网站的最下方来下载next主题!下载后解压就可以得到一个主题文件夹了!将文件夹改名为主题名，这里我改为next!然后将主题文件夹放置hexo博客文件夹的themes文件夹下!然后修改站点配置文件_config.yml中的theme参数!将参数值修改成主题文件夹的名字即可1$theme: next 重新编译并启动hexo博客即可完成博客主题的更换12$hexo g$hexo s 将Hexo博客推送到Github现在我们就可以将本地的Hexo博客推送到Github博客上了首先需要在站点配置文件_config.yml中添加deploy参数1234deploy: type: git repository: ssh://git@github.com/username/username.github.io.git branch: master 接下来需要利用到git-bash工具了git-bash利用git工具生成ssh密钥1234$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;# Creates a new ssh key using the provided emailGenerating public/private rsa key pair.Enter file in which to save the key (/home/you/.ssh/id_rsa): 输入ssh密钥的保存位置后(默认就回车)接下来输入ssh密码即可12Enter passphrase (empty for no passphrase): [Type a passphrase]Enter same passphrase again: [Type passphrase again] 回车后ssh密钥即在指定的位置生成了!到ssh密钥的生成路径复制id_rsa.pub文件中的内容打开github,选择需要推送的仓库后—Settings设置Deploy Keys的Titile，将ssh密钥粘贴到Key栏中点击Add Key确认后即可设置该仓库的推送密钥可以通过在git中对这个ssh密钥进行验证测试!1$ssh -T git@github.com 输入创建ssh密钥时输入的密码!如果返回xxxx You’ve successful authenticated则代表这个ssh密钥设置成功了!接下来在git中1234$npm install hexo-deployer-git$hexo clean$hexo g$hexo d 然后按照指示输入你设置ssh密钥时的密码即可！当出现下面的提示就推送成功了1INFO Deploy done: git 可能出现的错误12Error: ERROR: The key you are authenticating with has been marked as read only.fatal: Could not read from remote repository. 将github中仓库的Deploy keys中设置的ssh密钥删除!然后在github中的Personal settings—SSH and GPG keys中来添加ssh密钥即可! 每一次推送的基本流程123$hexo clean$hexo g$hexo d]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
